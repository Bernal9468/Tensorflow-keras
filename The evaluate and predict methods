{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOkGfmcceOywWLohx2KymvW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hEhUgbA4r8Z","executionInfo":{"status":"ok","timestamp":1710284304196,"user_tz":300,"elapsed":19271,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"3762a502-d87b-4df5-a1f2-7d31fcb0c38c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('gdrive')"]},{"cell_type":"code","source":["import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from tensorflow.keras.preprocessing import image"],"metadata":{"id":"KYQLWHCl43Ui","executionInfo":{"status":"ok","timestamp":1710284329929,"user_tz":300,"elapsed":4190,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# Load the Fashion-MNIST dataset\n","fashion_data = tf.keras.datasets.fashion_mnist\n","(train_images, train_labels), (test_images, test_labels) = fashion_data.load_data()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ipiOW06a49xZ","executionInfo":{"status":"ok","timestamp":1710284334754,"user_tz":300,"elapsed":896,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"1325d531-4190-473a-bec0-e75021d8c614"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","29515/29515 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26421880/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","5148/5148 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4422102/4422102 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["# Define the labels\n","labels = [\n","    'T-shirt/top',\n","    'Trouser',\n","    'Pullover',\n","    'Dress',\n","    'Coat',\n","    'Sandal',\n","    'Shirt',\n","    'Sneaker',\n","    'Bag',\n","    'Ankle boot'\n","]\n","print(train_labels[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H-GMT3FM5Agn","executionInfo":{"status":"ok","timestamp":1710284345167,"user_tz":300,"elapsed":3,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"2539a33c-43ce-4a2c-a51e-1ba8142e1a65"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["9\n"]}]},{"cell_type":"code","source":["# Rescale the image values so that they lie in between 0 and 1.\n","train_images = train_images/ 255.\n","test_images = test_images/ 255."],"metadata":{"id":"t5LYDBuX5Cfx","executionInfo":{"status":"ok","timestamp":1710284353250,"user_tz":300,"elapsed":2,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\n","\n","# Build the Sequential convolutional neural network model\n","\n","model = Sequential([\n","    Conv2D(16, (3,3), strides=2, padding=\"SAME\", activation=\"relu\", input_shape=(28,28,1)),\n","    MaxPooling2D((3,3)),\n","    Flatten(),\n","    Dense(10, activation='softmax')\n","])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JCX_GYRw5DMf","executionInfo":{"status":"ok","timestamp":1710284378444,"user_tz":300,"elapsed":303,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"e54f67bc-223d-4250-eef5-5e8137dfb400"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 14, 14, 16)        160       \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 4, 4, 16)          0         \n"," D)                                                              \n","                                                                 \n"," flatten (Flatten)           (None, 256)               0         \n","                                                                 \n"," dense (Dense)               (None, 10)                2570      \n","                                                                 \n","=================================================================\n","Total params: 2730 (10.66 KB)\n","Trainable params: 2730 (10.66 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# Define the model optimizer, loss function and metrics\n","import tensorflow as tf\n","\n","opt = tf.keras.optimizers.Adam(learning_rate=0.005)\n","acc = tf.keras.metrics.SparseCategoricalAccuracy()\n","mae = tf.keras.metrics.MeanAbsoluteError()\n","l = tf.keras.losses.SparseCategoricalCrossentropy()\n","\n","model.compile(optimizer=opt,\n","              loss=l,\n","              metrics=[acc, mae])"],"metadata":{"id":"ErIki_2f5LbS","executionInfo":{"status":"ok","timestamp":1710284389999,"user_tz":300,"elapsed":3,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","\n","history = model.fit(train_images[..., np.newaxis], train_labels, epochs=8, batch_size=256)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"li-mfpHW5Nzd","executionInfo":{"status":"ok","timestamp":1710284435096,"user_tz":300,"elapsed":35594,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"2b1b41c6-c44b-4b6e-ae78-0e6dcc5950bd"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/8\n","235/235 [==============================] - 5s 18ms/step - loss: 0.7483 - sparse_categorical_accuracy: 0.7468 - mean_absolute_error: 4.4200\n","Epoch 2/8\n","235/235 [==============================] - 5s 21ms/step - loss: 0.4634 - sparse_categorical_accuracy: 0.8355 - mean_absolute_error: 4.4200\n","Epoch 3/8\n","235/235 [==============================] - 4s 16ms/step - loss: 0.4262 - sparse_categorical_accuracy: 0.8473 - mean_absolute_error: 4.4200\n","Epoch 4/8\n","235/235 [==============================] - 4s 16ms/step - loss: 0.4063 - sparse_categorical_accuracy: 0.8545 - mean_absolute_error: 4.4200\n","Epoch 5/8\n","235/235 [==============================] - 5s 23ms/step - loss: 0.3957 - sparse_categorical_accuracy: 0.8575 - mean_absolute_error: 4.4200\n","Epoch 6/8\n","235/235 [==============================] - 4s 16ms/step - loss: 0.3847 - sparse_categorical_accuracy: 0.8608 - mean_absolute_error: 4.4200\n","Epoch 7/8\n","235/235 [==============================] - 4s 16ms/step - loss: 0.3802 - sparse_categorical_accuracy: 0.8625 - mean_absolute_error: 4.4200\n","Epoch 8/8\n","235/235 [==============================] - 5s 22ms/step - loss: 0.3726 - sparse_categorical_accuracy: 0.8639 - mean_absolute_error: 4.4200\n"]}]},{"cell_type":"code","source":["# Evaluate the model\n","\n","test_loss, test_accuracy, test_mae = model.evaluate(test_images[..., np.newaxis], test_labels, verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LdbKIM1l76o7","executionInfo":{"status":"ok","timestamp":1710285113488,"user_tz":300,"elapsed":1107,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"c6199636-90fb-4b4a-e3ad-44f645752aa3"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 - 1s - loss: 0.4081 - sparse_categorical_accuracy: 0.8529 - mean_absolute_error: 4.4200 - 788ms/epoch - 3ms/step\n"]}]},{"cell_type":"code","source":["# Choose a random test image\n","\n","random_inx = np.random.choice(test_images.shape[0])\n","test_image = test_images[random_inx]\n","plt.imshow(test_image)\n","plt.show()\n","print(f\"Label: {labels[test_labels[random_inx]]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"kulwd-j98QKQ","executionInfo":{"status":"ok","timestamp":1710285785316,"user_tz":300,"elapsed":366,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"f06979be-1d40-4809-e29f-97bcc013e163"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Label: Shirt\n"]}]},{"cell_type":"code","source":["# Get the model predictions\n","\n","predictions = model.predict(test_image[np.newaxis, ..., np.newaxis])\n","print(f\"Model prediction: {labels[np.argmax(predictions)]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T8KQkEz89rFW","executionInfo":{"status":"ok","timestamp":1710285787278,"user_tz":300,"elapsed":232,"user":{"displayName":"Daniel Fernando Morales Bernal","userId":"00068911931279033562"}},"outputId":"faaf1d60-32b8-42c2-b6a9-5e58377fead0"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 19ms/step\n","Model prediction: Shirt\n"]}]}]}