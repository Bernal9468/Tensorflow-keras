# -*- coding: utf-8 -*-
"""Fit method

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btPIOUK8xKigoGlLXqGDacYI09Ka2Ux1
"""

from google.colab import drive
drive.mount('gdrive')

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing import image

# Load the Fashion-MNIST dataset
fashion_data = tf.keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_data.load_data()

# Print the shape of the training data
train_images.shape

# Define the labels
labels = [
    'T-shirt/top',
    'Trouser',
    'Pullover',
    'Dress',
    'Coat',
    'Sandal',
    'Shirt',
    'Sneaker',
    'Bag',
    'Ankle boot'
]
print(train_labels[0])

# Rescale the image values so that they lie in between 0 and 1.
train_images = train_images/ 255.
test_images = test_images/ 255.

# Display one of the images
i = 0
img = train_images[i,:,:]
plt.imshow(img)
plt.show()
print(f'label: {labels[train_labels[i]]}')

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Softmax

# Build the Sequential feedforward neural network model
model = Sequential([
    Flatten(input_shape=(20,20)),
    Dense(16, activation="relu"),
    Dense(16, activation="relu"),
    Dense(10, activation="relu")])

# Print the model summary
model.summary()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

# Build the Sequential convolutional neural network model

model = Sequential([
    Conv2D(16, (3,3), strides=2, padding="SAME", activation="relu", input_shape=(28,28,1)),
    MaxPooling2D((3,3)),
    Flatten(),
    Dense(10, activation='softmax')
])

# Print the model summary
model.summary()

# Define the model optimizer, loss function and metrics
import tensorflow as tf

opt = tf.keras.optimizers.Adam(learning_rate=0.005)
acc = tf.keras.metrics.SparseCategoricalAccuracy()
mae = tf.keras.metrics.MeanAbsoluteError()
l = tf.keras.losses.SparseCategoricalCrossentropy()

model.compile(optimizer=opt,
              loss=l,
              metrics=[acc, mae])

# Print the resulting model attributes
print(model.loss)
print(model.optimizer)
print(model.metrics)
print(model.optimizer.lr)

import tensorflow as tf
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

history = model.fit(train_images[..., np.newaxis], train_labels, epochs=8, batch_size=256)

# Load the history into a pandas Dataframe

df = pd.DataFrame(history.history)
df

# Make a plot for the loss

loss_plot = df.plot(y="loss", title="Loss vs Epochs", legend=False)
loss_plot.set(xlabel="Epochs", ylabel="Loss")

# Make a plot for the accuracy

accuracy_plot = df.plot(y="sparse_categorical_accuracy", title="Accuracy vs Epochs", legend=False)
accuracy_plot.set(xlabel="Epochs", ylabel="Accuracy")

# Make a plot for the additional metric

mae_plot = df.plot(y="mean_absolute_error", title="MAE vs Epochs", legend=False)
mae_plot.set(xlabel="Epochs", ylabel="MAE")

# Plot accuracy vs mae

c = df.plot(x='sparse_categorical_accuracy', y="mean_absolute_error", title="Accuracy vs Error", legend=False)
c.set(xlabel='Accuracy', ylabel='MAE')